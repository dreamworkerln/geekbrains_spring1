Откуда взялось две иерархии параметров запроса - DTO и Entity
(зачем две, одной не хватает что-ли, наполодить классов, чтоб запутаться?)


Идея - в множестве DTO (списки заказов, кол-во доступного товара на складе и т.д.)
нужно передавать не всю сущность целиком (со всеми полями), а только ее Id.

Соответственно, на клиентской стороне удобно пользоваться запросами типа
"дай мне список, отображающий количество товара на складе, вот тебе List
id товаров, которые меня интересуют."

Но на сервере, при обработке подобного запроса, возможно,
потребуется не только id, но и другие поля товара.

MapStruct позволяет в интерфейсе отображения подключать сервисы(репозитории, компоненты)
Spring, что позволяет, в свою очередь из id получить полноценные товары (со всеми полями).
Соответственно код сервиса по боработке такого запроса можно будет вынести в
интерфейс маппера DTO -> Entity и не загромождать сервис.

+ Hibernate умеет кеши, поэтому, IMHO(надеюсь) если там ничего не поменялось на складе,
то запрос(преобразование productId -> Product) не пойдет в БД,
а вернентся из RAM, что обеспечит большую производительность.
Но вот подгружать изменяющуюся информацию, с которой надо работать в транзакции, я бы не стал.

Если же нет, то такое поведение (преобразование productId -> Product)
можно будет отключить.
Скорее всего так и произойдет, нужно будет прибить AbstractParam из иерархии Entity.


Вот из-за этого сейчас в проекте и существует как AbstractParam так и AbstractParamDto
(две иерархии параметров запросов, DTO и Entity).
И скорее всего, после испытаний останется только одна.
