package jsonrpc.server.repository.specifications.product;

import jsonrpc.server.entities.product.Product;
import jsonrpc.server.repository.specifications.base.SpecSearchCriteria;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.lang.Nullable;

import javax.persistence.criteria.*;

public class ProductSpecification implements Specification<Product> {

	private SpecSearchCriteria criteria;

	public ProductSpecification(final SpecSearchCriteria criteria) {
		super();
		this.criteria = criteria;
	}

	public SpecSearchCriteria getCriteria() {
		return criteria;
	}

	@Override
	public Predicate toPredicate(final Root<Product> root, final CriteriaQuery<?> query, final CriteriaBuilder builder) {
		switch (criteria.getOperation()) {
		case EQUALITY:
			return builder.equal(root.get(criteria.getKey()), criteria.getValue());
		case NEGATION:
			return builder.notEqual(root.get(criteria.getKey()), criteria.getValue());
		case GREATER_THAN:
			return builder.greaterThan(root.get(criteria.getKey()), criteria.getValue().toString());
            case GREATER_OR_EQUAL_THAN:
                return builder.greaterThanOrEqualTo(root.get(criteria.getKey()), criteria.getValue().toString());
		case LESS_THAN:
			return builder.lessThan(root.get(criteria.getKey()), criteria.getValue().toString());
            case LESS_OR_EQUAL_THAN:
                return builder.greaterThanOrEqualTo(root.get(criteria.getKey()), criteria.getValue().toString());
		case LIKE:
			return builder.like(root.get(criteria.getKey()), criteria.getValue().toString());
		case STARTS_WITH:
			return builder.like(root.get(criteria.getKey()), criteria.getValue() + "%");
		case ENDS_WITH:
			return builder.like(root.get(criteria.getKey()), "%" + criteria.getValue());
		case CONTAINS:
			return builder.like(root.get(criteria.getKey()), "%" + criteria.getValue() + "%");
        case IN:
            return builder.in(root.get(criteria.getKey()).get("id")).value(criteria.getValue());
        case BETWEEN:
            Comparable[] vec = (Comparable[])criteria.getValue();
            return builder.between(root.get(criteria.getKey()), vec[0], vec[1]);

		default:
			return null;
		}
	}

    @Nullable
    static Specification<Product> start() {
        return  (root, query, builder) -> null;
    }

}
